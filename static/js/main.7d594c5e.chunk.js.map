{"version":3,"sources":["components/Input.js","components/Group.js","components/Total.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","count","handleBlur","event","target","value","_this","setState","handleChange","intCount","parseInt","isNaN","props","updateTotal","grouping","react_default","a","createElement","className","this","label","onBlur","onChange","min","type","Component","Group","inputs","key","values","push","components_Input","Total","grand_total","banknotes","coins","_this$props$format","format","percision","symbol","sub_total","toFixed","total","App","currencies","EUR","€500","€200","€100","€50","€20","€10","€5","€1","€2","€0.50","€0.20","€0.10","€0.05","€0.02","€0.01","USD","$100","$50","$20","$10","$5","$2","$1","$0.50","$0.25","$0.10","$0.05","$0.01","code","quantity","_this$state","currency","components_Total","components_Group","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d594c5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  state = {\n    count: 0\n  }\n\n  handleBlur = (event) => {\n    if (event.target.value === \"\") {\n      this.setState({count: 0});\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({count: event.target.value});\n\n    let intCount = parseInt(event.target.value);\n    if (!isNaN(intCount)) {\n      this.props.updateTotal(this.props.grouping, this.props.value, intCount);\n    }\n  }\n\n  render() {\n    let containerClasses = \"column is-1-desktop is-3-mobile\";\n\n    return (\n      <div className={containerClasses}>\n        <div className=\"field has-text-centered\">\n          <label className=\"label\">{this.props.label}</label>\n          <div className=\"control\">\n            <input\n              className=\"input is-large\"\n              onBlur={this.handleBlur}\n              onChange={this.handleChange}\n              min=\"0\"\n              type=\"number\"\n              value={this.state.count}/>\n          </div>\n        </div>\n      </div>);\n  }\n}\n\nInput.propTypes = {\n  grouping: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  mobileClassName: PropTypes.string,\n  updateTotal: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Input from './Input';\n\nclass Group extends Component {\n  render() {\n    var inputs = [];\n\n    for(let key in this.props.values) {\n      inputs.push(<Input\n        grouping={this.props.grouping}\n        key={key}\n        label={key}\n        value={this.props.values[key]}\n        updateTotal={this.props.updateTotal}\n      />)\n    }\n\n    return (\n      <div>\n        <div className=\"has-text-centered\">\n          <h1 className=\"title is-4\">{this.props.grouping}</h1>\n        </div>\n        <br/>\n        <div className=\"columns is-centered is-mobile is-multiline\">\n          {inputs}\n        </div>\n      </div>);\n  }\n}\n\nGroup.propTypes = {\n  grouping: PropTypes.string.isRequired,\n  updateTotal: PropTypes.func.isRequired,\n  values: PropTypes.object.isRequired\n};\n\nexport default Group;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Total extends Component {\n  grand_total = (values) => {\n    let { banknotes, coins} = values;\n    let { percision, symbol } = this.props.format;\n\n    var total = this.sub_total(banknotes) + this.sub_total(coins);\n\n    return symbol + total.toFixed(percision);\n  }\n\n  sub_total = (values) => {\n    var total = 0;\n    for (let key in values) {\n      total += key * values[key];\n    }\n    return total;\n  }\n\n  render() {\n    return (\n      <div className=\"columns is-centered is-mobile\">\n        <div className=\"column is-3-desktop is-6-tablet is-8-mobile\">\n          <div className=\"box has-text-centered\">\n            <h1 className=\"title\">{this.grand_total(this.props.values)}</h1>\n            <p className=\"subtitle\">Total</p>\n          </div>\n        </div>\n      </div>);\n  }\n}\n\nTotal.propTypes = {\n  format: PropTypes.object.isRequired,\n  values: PropTypes.object.isRequired\n};\n\nexport default Total;\n","import React, { Component } from 'react';\n\nimport Group from './components/Group';\nimport Total from './components/Total';\n\nclass App extends Component {\n  currencies = {\n    \"EUR\": {\n      banknotes: { \"€500\": 500, \"€200\": 200, \"€100\": 100, \"€50\": 50, \"€20\": 20, \"€10\": 10, \"€5\": 5, \"€1\": 1 },\n      coins: { \"€2\": 2, \"€1\": 1, \"€0.50\": 0.50, \"€0.20\": 0.20, \"€0.10\": 0.10, \"€0.05\": 0.05, \"€0.02\": 0.02, \"€0.01\": 0.01 },\n      format: { \"symbol\": \"€\", \"percision\": 2 }\n    },\n    \"USD\": {\n      banknotes: { \"$100\": 100, \"$50\": 50, \"$20\": 20, \"$10\": 10, \"$5\": 5, \"$2\": 2, \"$1\": 1 },\n      coins: { \"$1\": 1, \"$0.50\": 0.50, \"$0.25\": 0.25, \"$0.10\": 0.10, \"$0.05\": 0.05, \"$0.01\": 0.01 },\n      format: { \"symbol\": \"$\", \"percision\": 2 }\n    }\n  }\n\n  state = {\n    code: \"USD\",\n    values: {\n      banknotes: {},\n      coins: {}\n    }\n  }\n\n  updateTotal = (grouping, value, quantity) => {\n    var { values } = this.state;\n    values[grouping][value] = quantity;\n    this.setState({ values: values });\n  }\n\n  render() {\n    let { code, values } = this.state;\n    let currency = this.currencies[code];\n\n    return (\n      <div className=\"container has-text-centered\">\n        <Total format={currency.format} values={values}/>\n        <Group grouping=\"Banknotes\" values={currency.banknotes} updateTotal={this.updateTotal} />\n        <hr />\n        <Group grouping=\"Coins\" values={currency.coins} updateTotal={this.updateTotal} />\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}